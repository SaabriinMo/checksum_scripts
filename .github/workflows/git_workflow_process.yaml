name: Automated Git Workflow used by developers

on:
  push:
    branches: ['*']
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write
  id-token: write
  issues: write

jobs:
  format-and-create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Branch Info
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.head_ref: ${{ github.head_ref }}"
          echo "repo owner: ${{ github.repository_owner }}"

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref != '' && github.head_ref || github.ref != '' && github.ref || 'main' }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up GitHub CLI
        run: |
          sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Run Black (format instead of check)
        uses: psf/black@stable
        with:
          options: "."

      - name: Run isort (apply changes)
        uses: isort/isort-action@v1
        with:
          requirements-files: ""
          sort-paths: "."
          configuration: "--profile black"

      - name: Check for formatting changes
        id: check-changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Formatting changes were needed and have been applied"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed"
          fi

      - name: Create and push formatting branch
        if: steps.check-changes.outputs.changes == 'true'
        id: create-format-branch
        run: |
          # Generate timestamp for unique branch name
          TIMESTAMP=$(date +%s)

          # Set source branch name
          SOURCE_BRANCH="${{ github.head_ref || github.ref_name }}"

          # Create a new branch for the formatting changes
          FORMAT_BRANCH="${SOURCE_BRANCH}-format-${TIMESTAMP}"

          # Create and checkout the new branch
          git checkout -b "${FORMAT_BRANCH}"

          # Add and commit changes
          git add .
          git commit -m "Apply automatic formatting with Black and isort"

          # Push the new branch
          git push origin "${FORMAT_BRANCH}"

          # Save branch names for later steps
          echo "source_branch=${SOURCE_BRANCH}" >> $GITHUB_OUTPUT
          echo "format_branch=${FORMAT_BRANCH}" >> $GITHUB_OUTPUT

      - name: Create PR for formatting changes
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          # Create PR from format branch to source branch
          gh pr create \
            --repo "${{ github.repository }}" \
            --base "${{ steps.create-format-branch.outputs.source_branch }}" \
            --head "${{ steps.create-format-branch.outputs.format_branch }}" \
            --title "Automatic formatting for ${{ steps.create-format-branch.outputs.source_branch }}" \
            --body "This PR contains automatic formatting changes applied by Black and isort."
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check if PR exists for main
        id: check-pr
        if: github.event_name == 'push' && github.ref != 'refs/heads/main'
        run: |
          echo "Checking for PR from ${{ github.ref_name }} to main"

          PR_EXISTS=$(gh pr list \
              --repo "${{ github.repository }}" \
              --head "${{ github.ref_name }}" \
              --base "main" \
              --state open \
              --json number \
              --jq 'length' 2>/dev/null || echo "error")

          echo "PR_EXISTS raw value: $PR_EXISTS"

          if [ "$PR_EXISTS" = "error" ]; then
            echo "Error querying GitHub API -- assuming no PR exists"
            echo "create_pr=true" >> $GITHUB_OUTPUT
          elif [ "$PR_EXISTS" -gt 0 ]; then
            echo "PR for branch ${{ github.ref_name }} to main already exists"
            echo "create_pr=false" >> $GITHUB_OUTPUT
          else
            echo "No PR exists for branch ${{ github.ref_name }} to main"
            echo "create_pr=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR to main
        if: steps.check-pr.outputs.create_pr == 'true' && github.event_name == 'push' && github.ref != 'refs/heads/main'
        run: |
          echo "Creating PR from ${{ github.ref_name }} to main"
          gh pr create \
            --repo "${{ github.repository }}" \
            --base "main" \
            --head "${{ github.ref_name }}" \
            --title "PR for branch: ${{ github.ref_name }}" \
            --body "This PR was automatically created from branch: ${{ github.ref_name }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
