name: Automated Formatting and PR Workflow

on:
  push:
    branches-ignore: ['main']  # Skip main branch
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write
  pull-requests: write

jobs:
  format-and-create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Branch Info
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Head Ref: ${{ github.head_ref }}"
          echo "Ref Name: ${{ github.ref_name }}"
          echo "Repo Owner: ${{ github.repository_owner }}"

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          token: ${{ secrets.BFI_BOT_TOKEN }}  # Use token with bypass permissions
          fetch-depth: 0

      - name: Setup Git Identity
        run: |
          git config user.name "BFI Automation Bot"
          git config user.email "bfi-automation@users.noreply.github.com"

      - name: Set up GitHub CLI
        run: |
          sudo apt-get update && sudo apt-get install -y gh

      - name: Authenticate GitHub CLI
        run: |
          echo "${{ secrets.BFI_BOT_TOKEN }}" | gh auth login --with-token

      # Formatting steps
      - name: Run Black
        uses: psf/black@stable
        with:
          options: "."

      - name: Run isort
        uses: isort/isort-action@v1
        with:
          requirements-files: ""
          sort-paths: "."
          configuration: "--profile black"

      - name: Check for formatting changes
        id: check-changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Formatting changes detected"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed"
          fi

      # Push changes using token with bypass permissions
      - name: Push formatted changes
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          FORMAT_BRANCH="${{ github.ref_name }}-formatted-$(date +%s)"
          git checkout -b "$FORMAT_BRANCH"
          git add .
          git commit -m "🔧 Automated formatting with Black/isort"

          # Push using the token with bypass permissions
          git push origin "$FORMAT_BRANCH" \
            --force-with-lease \
            --no-verify  # Skip CI if needed

          echo "formatted_branch=$FORMAT_BRANCH" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.BFI_BOT_TOKEN }}

      # PR creation logic
      - name: Check for existing PR
        id: check-pr
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          PR_EXISTS=$(gh pr list \
            --repo "bfidatadigipres/checksum_scripts" \
            --head "$FORMAT_BRANCH" \
            --base main \
            --json number \
            --jq 'length')

          if [ "$PR_EXISTS" -eq 0 ]; then
            echo "create_pr=true" >> $GITHUB_OUTPUT
          else
            echo "create_pr=false" >> $GITHUB_OUTPUT
            echo "PR already exists for branch $FORMAT_BRANCH"
          fi
        env:
          GH_TOKEN: ${{ secrets.BFI_BOT_TOKEN }}
          FORMAT_BRANCH: ${{ steps.push-changes.outputs.formatted_branch }}

      - name: Create Pull Request
        if: steps.check-pr.outputs.create_pr == 'true'
        run: |
          gh pr create \
            --repo "bfidatadigipres/checksum_scripts" \
            --base main \
            --head "${{ github.repository_owner }}:$FORMAT_BRANCH" \
            --title "Automated formatting updates ($FORMAT_BRANCH)" \
            --body "This PR contains automated formatting changes from Black and isort" \
            --label "automated,formatting"
        env:
          GH_TOKEN: ${{ secrets.BFI_BOT_TOKEN }}
          FORMAT_BRANCH: ${{ steps.push-changes.outputs.formatted_branch }}

  lint:
      runs-on: ubuntu-latest
      needs: format-and-create-pr
      steps:
        - name: Set up GitHub CLI
          run: |
            curl -fsSL https://cli.github.com/install.sh | bash

        - name: Authenticate GitHub CLI
          run: |
             unset GH_TOKEN
             echo "${{ secrets.BFI_BOT_TOKEN}}" | gh auth login --with-token


        - uses: actions/checkout@v4
          with:
            ref: ${{ github.head_ref || github.ref }}
            fetch-depth: 0

        - run: git pull

        - uses: actions/setup-python@v5
          with:
            python-version: '3.12'

        - run: pip install pylint

        - id: pylint
          run: |
            export LANG=en_US.UTF-8
            mkdir -p reports
            python -m pylint *.py > reports/pylint-report.txt || true
            sed -i 's/\(.*:[0-9]\+:[0-9]\+:[[:space:]]*\)\(E[0-9]\{4\}\)/\1🚨 \2/' reports/pylint-report.txt
            sed -i 's/\(.*:[0-9]\+:[0-9]\+:[[:space:]]*\)\(W[0-9]\{4\}\)/\1⚠️ \2/' reports/pylint-report.txt
            sed -i 's/\(.*:[0-9]\+:[0-9]\+:[[:space:]]*\)\(I[0-9]\{4\}\)/\1ℹ️ \2/' reports/pylint-report.txt
            sed -i 's/\(.*:[0-9]\+:[0-9]\+:[[:space:]]*\)\(C[0-9]\{4\}\)/\1🎨 \2/' reports/pylint-report.txt
            sed -i 's/\(.*:[0-9]\+:[0-9]\+:[[:space:]]*\)\(F[0-9]\{4\}\)/\1🛑 \2/' reports/pylint-report.txt
            sed -i 's/\(.*:[0-9]\+:[0-9]\+:[[:space:]]*\)\(R[0-9]\{4\}\)/\1♻️ \2/' reports/pylint-report.txt

        - name: print file
          run: cat reports/pylint-report.txt

        - name: Save Pylint report content to an environment file
          id: save_report
          run: |
            pylint_report=$(cat reports/pylint-report.txt)
            echo "pylint_report<<EOF" >> $GITHUB_ENV
            echo "$pylint_report" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV

        - name: Check if PR exists
          id: check-pr
          env:
            GITHUB_TOKEN: ${{secrets.BFI_BOT_TOKEN}}
            BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
          run: |
            echo "Checking for PR on branch: $BRANCH_NAME"

            PR_NUMBER=$(gh pr list --repo "bfidatadigipres/checksum_scripts" --head "$BRANCH_NAME" --state open --json number --jq '.[0].number' 2>/dev/null || echo "error")

            echo "Found PR number: $PR_NUMBER"
            if [  "$PR_NUMBER" != "error" ]; then
              echo "exists=true" >> $GITHUB_OUTPUT
              echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
            else
              echo "exists=false" >> $GITHUB_OUTPUT
            fi

        - name: Comment on PR with Full Pylint Report
          if: steps.check-pr.outputs.exists == 'true'
          uses: peter-evans/create-or-update-comment@v4
          with:
            issue-number: ${{ steps.check-pr.outputs.number }}
            edit-mode: replace
            repository: bfidatadigipres/checksum_scripts
            body: |
              **Automated Pylint Report** 🧑‍💻

              Here is the **formatted** Pylint report:

              ```plaintext
              ${{ env.pylint_report }}
              ```

              **Note:** 🚨 Errors need immediate attention! ⚠️ Warnings should be reviewed, but are less critical. ℹ️ Information messages are for your reference.
            token: ${{ secrets.BFI_BOT_TOKEN }}
