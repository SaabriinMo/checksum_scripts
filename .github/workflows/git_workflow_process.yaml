name: Automated Git Workflow for Fork

on:
  push:
    branches: ['*']
  pull_request:

permissions:
  contents: write
  pull-requests: write

jobs:
  format-code-and-create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Run Black (format instead of check)
        uses: psf/black@stable
        with:
          options: "."

      - name: Run isort (apply changes)
        uses: isort/isort-action@v1
        with:
          requirements-files: ""
          sort-paths: "."
          configuration: "--profile black --apply"

      - name: Check for formatting changes
        id: check-changes
        run: |
          git status
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Formatting changes were needed and have been applied"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed"
          fi

      - name: Commit changes back to branch
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git add .
          git commit -m "Apply automatic formatting with Black and isort"
          git push origin HEAD:${{ github.head_ref || github.ref_name }}

      - name: Extract repository and branch information
        id: repo-info
        run: |
          echo "Extracting repository information..."

          # Get current branch name
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Current branch: $BRANCH_NAME"

          # Get fork details
          FORK_FULL_NAME="${{ github.repository }}"
          FORK_OWNER="${{ github.repository_owner }}"
          echo "Fork: $FORK_FULL_NAME, Owner: $FORK_OWNER"

          # Get upstream repo details from the fork's configuration
          # For this example, you need to set UPSTREAM_OWNER as a repository secret
          # or you could try to extract it automatically if your fork is properly configured
          if [[ -n "${{ secrets.UPSTREAM_OWNER }}" ]]; then
            UPSTREAM_OWNER="${{ secrets.UPSTREAM_OWNER }}"
          else
            # Default fallback - edit this or set the secret in your repository
            UPSTREAM_OWNER="original-owner"
          fi

          # Extract repository name (works for forks as they have the same name)
          REPO_NAME=$(echo "$FORK_FULL_NAME" | cut -d '/' -f 2)

          echo "Upstream: $UPSTREAM_OWNER/$REPO_NAME"

          # Store values for later steps
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "fork_owner=$FORK_OWNER" >> $GITHUB_OUTPUT
          echo "repo_name=$REPO_NAME" >> $GITHUB_OUTPUT
          echo "upstream_owner=$UPSTREAM_OWNER" >> $GITHUB_OUTPUT

      - name: Check if PR exists and create if needed
        if: github.event_name == 'push' && github.ref != 'refs/heads/main'
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          # Variables for PR check/creation
          BRANCH_NAME="${{ steps.repo-info.outputs.branch_name }}"
          FORK_OWNER="${{ steps.repo-info.outputs.fork_owner }}"
          UPSTREAM_OWNER="${{ steps.repo-info.outputs.upstream_owner }}"
          REPO_NAME="${{ steps.repo-info.outputs.repo_name }}"

          echo "Checking if PR already exists from $FORK_OWNER:$BRANCH_NAME to $UPSTREAM_OWNER:main"

          # First check if we have the right token type
          if [[ "${{ secrets.PERSONAL_ACCESS_TOKEN }}" != "" ]]; then
            echo "Using personal access token for cross-repo operations"
            USING_PAT=true
          else
            echo "Using GITHUB_TOKEN (note: may have limited permissions for cross-repo operations)"
            USING_PAT=false
          fi

          # Check if this is a PR to the same repo or cross-repo
          if [[ "$FORK_OWNER" == "$UPSTREAM_OWNER" ]]; then
            echo "This is a branch in the same repository (not a fork)"
            # Check for existing PRs within the same repo
            PR_EXISTS=$(gh pr list --head "$BRANCH_NAME" --base main --json number --jq 'length')
          else
            if [[ "$USING_PAT" == "true" ]]; then
              # Check for existing PRs from fork to upstream
              PR_EXISTS=$(gh pr list --head "$FORK_OWNER:$BRANCH_NAME" --base main --repo "$UPSTREAM_OWNER/$REPO_NAME" --json number --jq 'length' || echo "0")
            else
              echo "Warning: Checking PRs across repositories requires a personal access token"
              PR_EXISTS="0"
            fi
          fi

          echo "Number of existing PRs: $PR_EXISTS"

          # Create PR if none exists
          if [[ "$PR_EXISTS" == "0" ]]; then
            echo "No PR exists, creating one now"

            # Prepare PR title and body
            PR_TITLE="Automated PR from $(if [[ $FORK_OWNER != $UPSTREAM_OWNER ]]; then echo "fork: $FORK_OWNER:"; fi)$BRANCH_NAME"
            PR_BODY="This PR was automatically created from branch: $BRANCH_NAME"

            # Create PR to the appropriate repository
            if [[ "$FORK_OWNER" == "$UPSTREAM_OWNER" ]]; then
              # Create PR within the same repository
              gh pr create --base main --head "$BRANCH_NAME" --title "$PR_TITLE" --body "$PR_BODY"
            else
              # Create PR from fork to upstream
              if [[ "$USING_PAT" == "true" ]]; then
                gh pr create --repo "$UPSTREAM_OWNER/$REPO_NAME" --base main --head "$FORK_OWNER:$BRANCH_NAME" --title "$PR_TITLE" --body "$PR_BODY"
              else
                echo "Error: Cannot create cross-repository PR without a personal access token"
              fi
            fi
          else
            echo "PR already exists - skipping PR creation"
          fi

  lint:
    runs-on: ubuntu-latest
    needs:
      - format-code-and-create-pr
    steps:
        - name: Checkout Code
          uses: actions/checkout@v4
          with:
            ref: ${{ github.head_ref || github.ref }}
            fetch-depth: 0

        - name: Pull latest changes
          run: git pull

        - name: Setup Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.12'

        - name: Install Pylint
          run: pip install pylint pytest

        - name: Generate Pylint report
          id: pylint
          run: |
            mkdir -p reports
            python -m pylint *.py > reports/pylint-report.txt || true

        - name: Upload report
          uses: actions/upload-artifact@v4
          with:
            name: pylint-report
            path: reports/pylint-report.txt

        - name: Comment on PR
          if: github.event_name == 'pull_request'
          uses: peter-evans/create-or-update-comment@v4
          with:
            issue-number: ${{ github.event.pull_request.number }}
            body-file: reports/pylint-report.txt
            edit-mode: replace
