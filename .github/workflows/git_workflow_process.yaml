name: Automated Git Workflow used by developers

on:
  push:
    branches: ['*']
  pull_request:

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  format-code-and-create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Run Black (format instead of check)
        uses: psf/black@stable
        with:
          options: "."

      - name: Run isort (apply changes)
        uses: isort/isort-action@v1
        with:
          requirements-files: ""
          sort-paths: "."
          configuration: "--profile black --apply"

      - name: Check for formatting changes
        id: check-changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Formatting changes were needed and have been applied"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed"
          fi

      - name: Commit changes back to branch
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git pull
          git add .
          git commit -m "Apply automatic formatting with Black and isort"
          git push origin ${{ github.head_ref || github.ref_name }}

      - name: Check if PR exists
        id: check-pr
        if: github.event_name == 'push'
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          PR_EXISTS=$(gh pr list --head "$BRANCH_NAME" --base main --json number --jq 'length')

          if [ "$PR_EXISTS" -gt 0 ]; then
            echo "PR for branch $BRANCH_NAME already exists"
            echo "create_pr=false" >> $GITHUB_OUTPUT
          else
            echo "No PR exists for branch $BRANCH_NAME, creating the branch"
            echo "create_pr=true" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create PR
        if: steps.check-pr.outputs.create_pr == 'true' && github.event_name == 'push'
        run: |
              echo "Creating PR"
              gh pr create \
                --base main \
                --head "${{github.head_ref}}" \
                --title "This PR was automatically created from branch: ${{ github.head_ref || github.ref_name }}}" \
                --body "New PR request"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    needs:
      - format-code-and-create-pr
    steps:

        - name: Checkout Code
          uses: actions/checkout@v4
          with:
            ref: ${{ github.head_ref || github.ref }}
            fetch-depth: 0

        - name: Setup Python
          uses: actions/setup-python@v5
          with:
            python-version: '3.12'

        - name: Install Pylint
          run: pip install pylint pytest

        - name: Generate Pylint report
          id: pylint
          run: |
            mkdir -p reports
            python -m pylint *.py > reports/pylint-report.txt || true

        - name: Upload report
          uses: actions/upload-artifact@v4
          with:
            name: pylint-report
            path: reports/pylint-report.txt

        - name: Comment on PR
          if: github.event_name == 'pull_request'
          uses: peter-evans/create-or-update-comment@v4
          with:
            issue-number: ${{ github.event.pull_request.number }}
            body-file: reports/pylint-report.txt
            edit-mode: replace
