name: Automated Git Workflow used by developers

on:
  push:
    branches: ['*']  # Trigger on push to any branch
  pull_request_target:
    types: [opened, synchronize, reopened]  # Optional, for PR-related events

permissions:
  contents: write
  pull-requests: write
  id-token: write
  issues: write

jobs:
  format-and-create-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Debug Branch Info
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.head_ref: ${{ github.head_ref }}"
          echo "github.repository_owner: ${{ github.repository_owner }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "Event Name: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}  # Checkout the correct branch based on the trigger
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Get full history

      - name: Setup Git
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

      - name: Run Black (format instead of check)
        uses: psf/black@stable
        with:
          options: "."

      - name: Run isort (apply changes)
        uses: isort/isort-action@v1
        with:
          requirements-files: ""
          sort-paths: "."
          configuration: "--profile black"

      - name: Check for formatting changes
        id: check-changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Formatting changes were needed and have been applied"
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No formatting changes needed"
          fi

      - name: Commit changes back to branch
        if: steps.check-changes.outputs.changes == 'true'
        run: |
          git add .
          git commit -m "Apply automatic formatting with Black and isort"
          git push https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.ref_name }}

      - name: Check if PR exists
        id: check-pr
        if: github.event_name == 'push' && github.ref != 'refs/heads/main'
        run: |
            BRANCH_NAME="${{ github.ref_name }}"  # This is the branch being pushed
            echo "Checking for PR from fork to main repo for branch: $BRANCH_NAME"

            # Query the GitHub API to check for existing PRs
            PR_EXISTS=$(gh pr list \
                --repo "bfidatidigipres/checksum_scripts" \
                --head "${{ github.repository_owner }}:${BRANCH_NAME}" \
                --base main \
                --state open \
                --json number \
                --jq 'length' 2>/dev/null || echo "error")

            echo "PR_EXISTS raw value: $PR_EXISTS"

            if [ "$PR_EXISTS" = "error" ]; then
              echo "Error querying GitHub API — assuming no PR exists"
              echo "create_pr=true" >> $GITHUB_OUTPUT
            elif [ "$PR_EXISTS" -gt 0 ]; then
              echo "PR for branch $BRANCH_NAME already exists"
              echo "create_pr=false" >> $GITHUB_OUTPUT
            else
              echo "No PR exists for branch $BRANCH_NAME"
              echo "create_pr=true" >> $GITHUB_OUTPUT
            fi
        env:
            GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Create PR
        if: steps.check-pr.outputs.create_pr == 'true' && github.event_name == 'push' && github.ref != 'refs/heads/main'
        run: |
              echo "Creating PR for branch ${{ github.ref_name }}"
              gh pr create \
                --repo "bfidatidigipres/checksum_scripts" \
                --base main \
                --head "${{ github.repository_owner }}:${{ github.ref_name }}" \
                --title "Automated PR for branch: ${{ github.ref_name }}" \
                --body "This PR was automatically created from branch: ${{ github.ref_name }}"
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

  lint:
    runs-on: ubuntu-latest
    needs: format-and-create-pr
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref_name }}
          fetch-depth: 0

      - run: git pull

      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - run: pip install pylint

      - id: pylint
        run: |
          mkdir -p reports
          python -m pylint *.py > reports/pylint-report.txt || true
          sed -i 's/E:.*/🚨 &/' reports/pylint-report.txt
          sed -i 's/W:.*/⚠️ &/' reports/pylint-report.txt
          sed -i 's/I:.*/ℹ️ &/' reports/pylint-report.txt

      - name: Save Pylint report content to an environment file
        id: save_report
        run: |
          pylint_report=$(cat reports/pylint-report.txt)
          echo "pylint_report<<EOF" >> $GITHUB_ENV
          echo "$pylint_report" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Check if PR exists for Pylint comment
        id: check-pr-pylint
        run: |
          BRANCH_NAME="${{ github.ref_name }}"
          echo "Checking for PR on branch: $BRANCH_NAME"
          PR_NUMBER=$(gh pr list --repo "bfidatidigipres/checksum_scripts" --head "${{ github.repository_owner }}:${{ github.ref_name }}" --state open --json number --jq '.[0].number' 2>/dev/null || echo "error")
          echo "Found PR number: $PR_NUMBER"
          if [ "$PR_NUMBER" != "error" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "number=$PR_NUMBER" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Comment on PR with Full Pylint Report
        if: steps.check-pr-pylint.outputs.exists == 'true'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ steps.check-pr-pylint.outputs.number }}
          edit-mode: replace
          repository: bfidatidigipres/checksum_scripts
          body: |
            **Automated Pylint Report** 🧑‍💻

            Here is the **formatted** Pylint report:

            ```plaintext
            ${{ env.pylint_report }}
            ```

            **Note:** 🚨 Errors need immediate attention! ⚠️ Warnings should be reviewed, but are less critical. ℹ️ Information messages are for your reference.
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
