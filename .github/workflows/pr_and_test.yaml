name: Lint and Create Pull Request

on:
  push:

permissions:
  contents: write
  pull-requests: write

jobs:
  lint-and-pr:
    runs-on: ubuntu-latest
    steps:
       - name: Checkout code
         uses: actions/checkout@v4
         with:
            token: ${{ secrets.GITHUB_TOKEN }}
            fetch-depth: 0

       - name: Set up Python
         uses: actions/setup-python@v4
         with:
           python-version: '3.9'

       - name: Install dependencies
         run: |
          python -m pip install --upgrade pip
          python -m pip install black isort
          python -m pip install 'pylint<3.0.0'  # Compatible with both Python 2 and 3
          if [ -f requirements.txt ]; then
            python -m pip install -r requirements.txt
          else
            echo "requirements.txt not found, skipping dependency installation."
          fi

       - name: Set branch name
         id: vars
         run: echo "branch_name=auto/format-branch" >> $GITHUB_OUTPUT

       - name: Configure Git
         run: |
             git config --global user.name "github-actions[bot]"
             git config --global user.email "github-actions[bot]@users.noreply.github.com"

       - name: Check if formatting needed
         id: check_format
         run: |
           if ! python -m black --check *.py || ! python -m isort --check-only *.py; then
             echo "formatting_needed=true" >> $GITHUB_OUTPUT
           else
             echo "formatting_needed=false" >> $GITHUB_OUTPUT
           fi

       - name: Formatting code
         if: steps.check_format.outputs.formatting_needed == 'true'
         run: |
           python -m black *.py
           python -m isort *.py

       - name: Generate pylint report
         run: |
          mkdir -p reports
          python -m pylint *.py > reports/pylint-report.txt || true

       - name: Read pylint output into env variable
         id: read-report
         run: |
           {
             echo 'BODY<<EOF'
             cat reports/pylint-report.txt
             echo 'EOF'
           } >> $GITHUB_OUTPUT

       - name: Check if PR already exists
         id: check_pr
         run: |
           BRANCH_NAME="${{ steps.vars.outputs.branch_name }}"
           PR_EXISTS=$(gh pr list --head "$BRANCH_NAME" --json number,state --jq '.[] | select(.state == "OPEN") | .number' | wc -l)

           if [ "$PR_EXISTS" -gt 0 ]; then
             echo "Existing open PR found for branch $BRANCH_NAME"
             echo "pr_exists=true" >> $GITHUB_OUTPUT
             PR_NUMBER=$(gh pr list --head "$BRANCH_NAME" --json number --jq '.[0].number')
             echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
           else
             echo "No existing open PR found for branch $BRANCH_NAME"
             echo "pr_exists=false" >> $GITHUB_OUTPUT
           fi
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

       - name: Create branch and prepare changes
         id: commit
         if: steps.check_format.outputs.formatting_needed == 'true'
         run: |
             BRANCH_NAME="${{ steps.vars.outputs.branch_name }}"

             # Check if branch exists on remote
             if git ls-remote --heads origin $BRANCH_NAME | grep -q $BRANCH_NAME; then
               # Branch exists, fetch it first
               git fetch origin $BRANCH_NAME
               git checkout $BRANCH_NAME
               git reset --hard origin/$BRANCH_NAME
               git rebase origin/main || git rebase --abort
             else
               # Create a new branch
               git checkout -b "$BRANCH_NAME"
             fi

             # Add the changes
             git add .

             # Check if there are changes to commit
             if git diff --staged --quiet; then
               echo "No changes to commit"
               echo "changes_made=false" >> $GITHUB_OUTPUT
             else
               echo "changes_made=true" >> $GITHUB_OUTPUT
             fi

       - name: Commit and push changes
         if: steps.commit.outputs.changes_made == 'true'
         run: |
             BRANCH_NAME="${{ steps.vars.outputs.branch_name }}"
             git commit -m "chore(formatting): automated linting updates"
             git push -f origin "$BRANCH_NAME"

       - name: Debug information
         run: |
           echo "Branch name: ${{ steps.vars.outputs.branch_name }}"
           echo "Formatting needed: ${{ steps.check_format.outputs.formatting_needed }}"
           echo "Changes made: ${{ steps.commit.outputs.changes_made || 'false' }}"
           echo "Current branch: $(git branch --show-current)"
           git status

       - name: Create or update Pull Request
         if: steps.commit.outputs.changes_made == 'true'
         run: |
             BRANCH_NAME="${{ steps.vars.outputs.branch_name }}"
             TIMESTAMP=$(date)
             PR_BODY="This PR applies automatic code formatting using Black and isort ðŸ§¹.

             ## Latest Pylint Report
             *Updated: $TIMESTAMP*

             \`\`\`
             ${{ steps.read-report.outputs.BODY }}
             \`\`\`
             "

             if [ "${{ steps.check_pr.outputs.pr_exists }}" == "true" ]; then
               echo "Updating existing PR #${{ steps.check_pr.outputs.pr_number }}"
               # Update PR description
               gh pr edit ${{ steps.check_pr.outputs.pr_number }} --body "$PR_BODY"
               # Add a comment about the update
               gh pr comment ${{ steps.check_pr.outputs.pr_number }} --body "Updated with latest formatting changes on $TIMESTAMP."
             else
               echo "Creating new PR"
               # Create the PR using GitHub CLI
               gh pr create \
                 --base main \
                 --head "$BRANCH_NAME" \
                 --title "Automated PR: Code Formatting" \
                 --body "$PR_BODY"
             fi
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
